@page "/master/fieldtag"
@inject IToastService ToastService
<div class="field-tag-container">
    <!-- ... (header remains unchanged) ... -->

    <!-- Tag Input Section (remains unchanged) ... -->

    <!-- Calculator Section with Result Tags -->
    <div class="card elegant-card">
        <div class="card-header">
            <div class="header-flex">
                <h2 class="section-title">
                    <i class="icon">🧮</i>
                    Precision Calculator
                </h2>
                <button class="btn btn-secondary btn-refresh" @onclick="RefreshCalculator" title="Clear all fields">
                    <i class="refresh-icon">🔄</i>
                    Refresh
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="calculator-grid">
                <!-- Input A with Result Tags -->
                <div class="form-group">
                    <label class="form-label">Input A:</label>
                    <InputText @bind-Value="inputAString" class="form-input elegant-input"
                               @onfocus="@(() => ShowFullPrecision(nameof(inputAString)))"
                               @onblur="@(() => ShowRounded(nameof(inputAString)))"
                               placeholder="Enter first number..." />
                    <div class="saved-tags-wrapper mt-2">
                        <span class="tag-section-label">Saved Results:</span>
                        @foreach (var tag in resultTags)
                        {
                            <span class="calculation-tag" @onclick="() => UseResultTag(tag, nameof(inputAString))">
                                @tag.DisplayValue
                                <button type="button" class="tag-remove-btn" 
                                        @onclick="() => RemoveResultTag(tag)" 
                                        @onclick:stopPropagation="true" 
                                        title="Delete saved result">
                                    <i class="remove-icon">×</i>
                                </button>
                            </span>
                        }
                    </div>
                </div>

                <div class="form-group operator-group">
                    <label class="form-label">Operator:</label>
                    <select @bind="selectedOperator" class="form-select elegant-select">
                        <option value="+">Addition (+)</option>
                        <option value="-">Subtraction (-)</option>
                        <option value="*">Multiplication (×)</option>
                        <option value="/">Division (÷)</option>
                    </select>
                </div>

                <!-- Input B with Result Tags -->
                <div class="form-group">
                    <label class="form-label">Input B:</label>
                    <InputText @bind-Value="inputBString" class="form-input elegant-input"
                               @onfocus="@(() => ShowFullPrecision(nameof(inputBString)))"
                               @onblur="@(() => ShowRounded(nameof(inputBString)))"
                               placeholder="Enter second number..." />
                    <div class="saved-tags-wrapper mt-2">
                        <span class="tag-section-label">Saved Results:</span>
                        @foreach (var tag in resultTags)
                        {
                            <span class="calculation-tag" @onclick="() => UseResultTag(tag, nameof(inputBString))">
                                @tag.DisplayValue
                                <button type="button" class="tag-remove-btn" 
                                        @onclick="() => RemoveResultTag(tag)" 
                                        @onclick:stopPropagation="true" 
                                        title="Delete saved result">
                                    <i class="remove-icon">×</i>
                                </button>
                            </span>
                        }
                    </div>
                </div>
            </div>

            <div class="button-group">
                <button class="btn btn-primary btn-calculate" @onclick="Calculate">
                    <i class="calc-icon">⚡</i>
                    Calculate
                </button>
            </div>

            <div class="form-group result-group">
                <label class="form-label">Result:</label>
                <div class="result-input-container">
                    <InputText @bind-Value="resultField" class="form-input result-input" disabled />
                    <button class="btn btn-gold btn-save" @onclick="SaveResultAsTag" 
                            disabled="@(!CanSaveResultAsTag())">
                        <i class="save-icon">⭐</i>
                        Save as Tag
                    </button>
                </div>
                <div class="form-text">
                    Stored value: @StoredResult.ToString("F10") |
                    Actual value: @ActualResult.ToString("F10")
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Add new styles for result tags */
    .tag-section-label {
        display: block;
        font-size: 0.8rem;
        color: var(--text-secondary);
        margin-bottom: 0.25rem;
    }
    
    .result-input-container {
        display: flex;
        gap: 0.5rem;
    }
    
    .btn-save {
        white-space: nowrap;
        padding: 0.5rem 1rem;
    }

   
    /* Import Google Fonts */
    .field-tag-container {
        font-family: var(--body-font);
        color: var(--text-primary);
        background: var(--bg-primary);
        padding: 2rem;
    }

    .page-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .page-title {
        font-family: var(--heading-font);
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .page-subtitle {
        color: var(--text-secondary);
        font-size: 1.1rem;
        font-weight: 400;
    }

    .elegant-card {
        background: var(--bg-secondary);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-md);
        margin-bottom: 1.5rem;
        overflow: hidden;
        transition: all 0.3s ease;
    }

        .elegant-card:hover {
            box-shadow: var(--shadow-lg);
            transform: translateY(-2px);
        }

    .card-header {
        background: linear-gradient(135deg, var(--bg-secondary), var(--bg-primary));
        padding: 1.5rem;
        border-bottom: 1px solid var(--border-color);
    }

    .header-flex {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .section-title {
        font-family: var(--heading-font);
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .icon {
        font-size: 1.2rem;
    }

    .card-body {
        padding: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        font-weight: 500;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
        font-size: 0.95rem;
    }

    .elegant-input, .elegant-select {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid var(--border-color);
        border-radius: var(--border-radius);
        background: var(--bg-secondary);
        color: var(--text-primary);
        font-size: 1rem;
        transition: all 0.3s ease;
        font-family: var(--body-font);
    }

        .elegant-input:focus, .elegant-select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .elegant-input:disabled {
            background: var(--bg-primary);
            opacity: 0.7;
        }

    /* Tag Input Styles */
    .tag-input-wrapper {
        position: relative;
    }

    .tag-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        align-items: center;
        min-height: 2.5rem;
        padding: 0.5rem;
        border: 2px solid var(--border-color);
        border-radius: var(--border-radius);
        background: var(--bg-secondary);
        transition: border-color 0.3s ease;
    }

        .tag-container:focus-within {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

    .tag-pill {
        display: inline-flex;
        align-items: center;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: var(--text-light);
        padding: 0.4rem 0.8rem;
        border-radius: 1.5rem;
        font-size: 0.85rem;
        font-weight: 500;
        gap: 0.5rem;
        box-shadow: var(--shadow-sm);
        transition: all 0.3s ease;
    }

        .tag-pill:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

    .calculation-tag {
        display: inline-flex;
        align-items: center;
        background: linear-gradient(135deg, var(--success-color), var(--secondary-color));
        color: var(--text-light);
        padding: 0.5rem 1rem;
        border-radius: 1.5rem;
        font-size: 0.9rem;
        font-weight: 500;
        gap: 0.5rem;
        cursor: pointer;
        box-shadow: var(--shadow-sm);
        transition: all 0.3s ease;
        margin: 0.25rem;
    }

        .calculation-tag:hover {
            background: linear-gradient(135deg, var(--success-color), var(--accent-color));
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

    .tag-remove-btn {
        background: none;
        border: none;
        color: rgba(255, 255, 255, 0.8);
        cursor: pointer;
        padding: 0;
        margin: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 1.2rem;
        height: 1.2rem;
        border-radius: 50%;
        transition: all 0.2s ease;
    }

        .tag-remove-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }

    .remove-icon {
        font-size: 1rem;
        line-height: 1;
    }

    .tag-input {
        border: none;
        outline: none;
        background: transparent;
        color: var(--text-primary);
        flex: 1;
        min-width: 120px;
        padding: 0.25rem;
        font-size: 0.9rem;
        font-family: var(--body-font);
    }

    /* Calculator Grid */
    .calculator-grid {
        display: grid;
        grid-template-columns: 1fr auto 1fr;
        gap: 1.5rem;
        align-items: end;
    }

    .operator-group {
        min-width: 180px;
    }

    /* Buttons */
    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: var(--border-radius);
        font-weight: 500;
        font-size: 0.95rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        font-family: var(--body-font);
        text-decoration: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: var(--text-light);
        box-shadow: var(--shadow-sm);
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

    .btn-secondary {
        background: var(--bg-primary);
        color: var(--text-primary);
        border: 1px solid var(--border-color);
    }

        .btn-secondary:hover {
            background: var(--border-color);
            transform: translateY(-1px);
        }

    .btn-gold {
        background: linear-gradient(135deg, var(--secondary-color), var(--accent-color));
        color: var(--text-light);
        box-shadow: var(--shadow-sm);
    }

        .btn-gold:hover {
            background: linear-gradient(135deg, var(--accent-color), var(--secondary-color));
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .btn-gold:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

    .btn-refresh {
        font-size: 0.9rem;
        padding: 0.5rem 1rem;
    }

    .button-group {
        text-align: center;
        margin: 1.5rem 0;
    }

    .btn-calculate {
        font-size: 1.1rem;
        padding: 1rem 2rem;
    }

    /* Result styling */
    .result-group {
        margin-top: 1.5rem;
    }

    .result-input {
        background: linear-gradient(135deg, var(--bg-primary), var(--bg-secondary));
        font-weight: 600;
        font-size: 1.1rem;
        text-align: center;
        color: var(--primary-color);
    }

    /* Saved calculations */
    .saved-calc-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .saved-tags-wrapper {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        align-items:center;
        min-height: 3rem;
        padding: 1rem;
        background: var(--bg-primary);
        border-radius: var(--border-radius);
        border: 1px solid var(--border-color);
    }

    .no-calculations {
        color: var(--text-secondary);
        font-style: italic;
        margin: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .field-tag-container {
            padding: 1rem;
        }

        .calculator-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .page-title {
            font-size: 2rem;
        }

        .header-flex {
            flex-direction: column;
            gap: 1rem;
            align-items: flex-start;
        }
    }

    /* Icons */
    .refresh-icon, .calc-icon, .save-icon {
        font-size: 1rem;
    }
</style>


@code {
    // Tag-related properties (unchanged)
    private List<string> tags = new();
    private string currentTag = "";
    
    // Result tags store
    private List<ResultTag> resultTags = new List<ResultTag>(10);
    
    // Calculator properties
    private string inputAString = "";
    private string inputBString = "";
    private string selectedOperator = "+";
    private string resultField = "";
    
    // Precision management
    private Dictionary<string, decimal> displayToActual = new Dictionary<string, decimal>(10);
    private decimal ActualResult { get; set; }
    private decimal StoredResult { get; set; }

    // Result tag class
    private class ResultTag
    {
        public string DisplayValue { get; set; } = "";
        public decimal ActualValue { get; set; }
    }

    // Tag input methods (unchanged)
    // ... [HandleTagKeyPress, AddTag, RemoveTag] ...

    // Enhanced calculation method
    private void Calculate()
    {
        // Convert inputs to actual values
        var a = ResolveToActual(inputAString);
        var b = ResolveToActual(inputBString);
        
        // Calculate with full precision
        ActualResult = selectedOperator switch
        {
            "+" => a + b,
            "-" => a - b,
            "*" => a * b,
            "/" => b != 0 ? a / b : 0,
            _ => 0
        };
        
        // Store with full precision for backend operations
        StoredResult = ActualResult;
        
        // Display rounded value
        resultField = Math.Round(ActualResult, 2).ToString("0.00");
        
        // Store mapping for this display value
        if (!displayToActual.ContainsKey(resultField))
        {
            displayToActual[resultField] = ActualResult;
        }
    }

    private decimal ResolveToActual(string input)
    {
        if (displayToActual.TryGetValue(input, out var actual))
            return actual;
        return decimal.TryParse(input, out var parsed) ? parsed : 0;
    }

    private void ShowFullPrecision(string field)
    {
        if (field == nameof(inputAString)) 
        {
            inputAString = ResolveToActual(inputAString).ToString("0.##########");
        }
        else if (field == nameof(inputBString)) 
        {
            inputBString = ResolveToActual(inputBString).ToString("0.##########");
        }
    }

    private void ShowRounded(string field)
    {
        if (field == nameof(inputAString) )
        {
            var val = ResolveToActual(inputAString);
            var rounded = Math.Round(val, 2).ToString("0.00");
            inputAString = rounded;
            displayToActual[rounded] = val;
        }
        else if (field == nameof(inputBString)) 
        {
            var val = ResolveToActual(inputBString);
            var rounded = Math.Round(val, 2).ToString("0.00");
            inputBString = rounded;
            displayToActual[rounded] = val;
        }
    }

    // Save result as reusable tag
    private bool CanSaveResultAsTag()
    {
        return !string.IsNullOrEmpty(resultField) && ActualResult != 0;
    }

    private void SaveResultAsTag()
    {
        if (!CanSaveResultAsTag()) return;

        if (resultTags.Count >= 10)
        {
            ToastService.ShowWarningAsync("Tag Limit Reached",
                "You can only save up to 10 result tags. Remove some tags to save new ones.");
            return;
        }

        // Check for duplicate display values
        var existingTag = resultTags.FirstOrDefault(t =>
            t.DisplayValue == resultField ||
            t.ActualValue == ActualResult
        );

        if (existingTag != null)
        {
            // Show toast notification
            ToastService.ShowWarningAsync("Duplicate Tag",
                $"Tag '{resultField}' already exists!");
            return;
        }

        // Create new tag
        var newTag = new ResultTag
        {
            DisplayValue = resultField,
            ActualValue = ActualResult
        };

        // Add to tag store
        resultTags.Add(newTag);

        // Ensure display mapping exists
        if (!displayToActual.ContainsKey(resultField))
        {
            displayToActual[resultField] = ActualResult;
        }

        // Show success notification
        ToastService.ShowSuccessAsync("Tag Saved",
            $"Saved '{resultField}' as reusable tag");
    }

    // Use a saved result tag in an input field
    private void UseResultTag(ResultTag tag, string field)
    {
        if (field == nameof(inputAString))
        {
            inputAString = tag.DisplayValue;
            displayToActual[tag.DisplayValue] = tag.ActualValue;
        }
        else if (field == nameof(inputBString))
        {
            inputBString = tag.DisplayValue;
            displayToActual[tag.DisplayValue] = tag.ActualValue;
        }
    }

    // Remove a result tag
    private void RemoveResultTag(ResultTag tag)
    {
        resultTags.Remove(tag);
        // Note: We don't remove from displayToActual as it might be used elsewhere
    }

    // Refresh calculator
    private void RefreshCalculator()
    {
        inputAString = "";
        inputBString = "";
        selectedOperator = "+";
        resultField = "";
        ActualResult = 0;
        StoredResult = 0;
    }
}