@page "/master/lookups"


@inject IJSRuntime JSRuntime
@inject IToastService ToastService

@using Syncfusion.Blazor.Grids

<PageTitle>Master Lookups - Jewel ERP</PageTitle>

<div class="lookup-container">
	<!-- Page Header -->
	<div class="page-header">
		<div class="header-content">
			<div class="header-title">
				<i class="bi bi-binoculars header-icon"></i>
				<div>
					<h1 class="page-title">Master Lookups</h1>
					<p class="page-subtitle">Manage and view all lookup tables</p>
				</div>
			</div>
			<div class="header-actions">
				<SfButton CssClass="e-primary" IconCss="bi bi-arrow-clockwise" OnClick="RefreshData" Disabled="@isLoading">
					@if (isLoading)
					{
							<span>Loading...</span>
					}
					else
					{
							<span>Refresh</span>
					}
				</SfButton>
			</div>
		</div>
	</div>

    <!-- Table Selection Card -->
    <div class="selection-card">
        <div class="card-header">
            <h5 class="card-title">
                <i class="bi bi-table"></i>
                Select Lookup Table
            </h5>
        </div>
        <div class="card-body">
            <div class="row align-items-end">
                <div class="col-md-8">
                    <label class="form-label">Choose Table</label>
                    <SfDropDownList TValue="string" 
                                   TItem="LookupTableDto" 
                                   DataSource="@availableTables" 
                                   @bind-Value="@selectedTableName"
                                   Placeholder="-- Select a lookup table --"
                                   CssClass="lookup-dropdown"
                                   Enabled="@(!isLoading)">

                         <DropDownListFieldSettings Value="TableName" Text="Description"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" TItem="LookupTableDto" ValueChange="OnTableSelectionChanged"></DropDownListEvents>
                    </SfDropDownList>
                </div>
                <div class="col-md-4">
                    @if (!string.IsNullOrEmpty(selectedTableName))
                    {
                        <div class="table-info">
                            <small class="text-muted">
                                <strong>Records:</strong> @totalRecords
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

	<!-- Data Grid Card -->
	@if (!string.IsNullOrEmpty(selectedTableName))
	{
			<div class="card">
				<div class="card-header">
					<h5 class="card-title">
						<i class="bi bi-grid-3x3-gap"></i>
					@GetSelectedTableDescription() Data
					</h5>
					<div class="card-actions">
						<SfButton CssClass="e-info e-small"
								  IconCss="bi bi-eye"
								  OnClick="() => showColumnSelector = !showColumnSelector">
							Columns
						</SfButton>
						
						
						<SfButton CssClass="e-success e-small" IconCss="bi bi-plus-circle" OnClick="AddNewRecord">
							Add New
						</SfButton>
						<SfButton CssClass="e-info e-small" IconCss="bi bi-download" OnClick="ExportData">
							Export
						</SfButton>
						@if (showColumnSelector)
						{
							<div class="column-selector-panel p-3 border rounded bg-white shadow-sm"
								 style="position:absolute; z-index:1000;top:30px; width:220px;">
								<h6>Show / Hide Columns</h6>
								@foreach (var col in gridColumns)
								{
									<div class="form-check">
										<input class="form-check-input"
											   type="checkbox"
											   id="@($"chk_{col.Field}")"
											   @bind="col.IsVisible" />
										<label class="form-check-label" for="@($"chk_{col.Field}")">
											@col.HeaderText
										</label>
									</div>
								}
							</div>
						}

					</div>
				</div>
				<div class="card-body">
				@if (isLoading)
				{
							<div class="loading-container">
								<div class="spinner-border text-primary" role="status">
									<span class="visually-hidden">Loading...</span>
								</div>
								<p class="mt-2">Loading data...</p>
							</div>
				}
				else if (gridData != null && gridData.Any())
				{
							<SfGrid DataSource="@gridData" 
								   AllowPaging="true" 
								   AllowSorting="true" 
								   AllowFiltering="true"
								   AllowSelection="true"
								   AllowResizing="true"
								   AllowGrouping
								   Height="500"
								   CssClass="lookup-grid">

								<GridPageSettings PageSize="20" PageSizes="@pageSizes"></GridPageSettings>
								<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
								<GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>

						<GridColumns>
							<!-- Render ALL columns (visible or hidden) -->
							@foreach (var column in gridColumns)
							{
								<GridColumn @key="@column.Field"
											Field="@column.Field"
											HeaderText="@column.HeaderText"
											Width="@column.Width"
											Type="@column.Type"
											Format="@column.Format"
											AllowEditing="@column.AllowEditing"
											Visible="@column.IsVisible">
									<!-- Syncfusion's visibility control -->
								</GridColumn>
							}

							<!-- Static Actions Column (Always Last) -->
							<GridColumn @key='"ActionsColumn"'
										HeaderText="Actions"
										Width="120"
										AllowSorting="false"
										AllowFiltering="false"
										Visible="true">
								<!-- Explicitly set to always show -->
								<Template>
									@{
										var data = (context as IDictionary<string, object>);
									}
									<div class="action-buttons">
										<SfButton CssClass="e-small e-primary e-icon-btn"
												  IconCss="bi bi-pencil"
												  OnClick="@(() => EditRecord(data))"
												  Title="Edit">
										</SfButton>
										<SfButton CssClass="e-small e-danger e-icon-btn"
												  IconCss="bi bi-trash"
												  OnClick="@(() => DeleteRecord(data))"
												  Title="Delete">
										</SfButton>
									</div>
								</Template>
							</GridColumn>
						</GridColumns>

								<GridEvents TValue="IDictionary<string, object>" 
										   OnRecordDoubleClick="OnRecordDoubleClick">
								</GridEvents>
							</SfGrid>

				}
				else
				{
							<div class="empty-state">
								<i class="bi bi-inbox empty-icon"></i>
								<h5>No Data Found</h5>
								<p class="text-muted">No records found for the selected table.</p>
								<SfButton CssClass="e-primary" IconCss="bi bi-plus-circle" OnClick="AddNewRecord">
									Add First Record
								</SfButton>
							</div>
				}
				</div>
			</div>
	}
	else
	{
					<div class="card" style="padding: 4rem 2rem; text-align: center;">
				<div class="welcome-content">
					<i class="bi bi-binoculars welcome-icon"></i>
					<h4>Welcome to Master Lookups</h4>
					<p class="text-muted">Select a lookup table from the dropdown above to view and manage its data.</p>
				</div>
			</div>
	}
</div>

@code {
	private bool showColumnSelector = false;
	// Data properties
	private List<LookupTableDto> availableTables = new();
	private string selectedTableName = string.Empty;
	private List<IDictionary<string, object>> gridData = new();

	private List<GridColumnModel> gridColumns = new();
	private int totalRecords = 0;
	private bool isLoading = false;
	private bool showAddColumnDialog;


	// Grid configuration
	private string[] pageSizes = { "10", "20", "50", "100" };

	// Grid column model
	public class GridColumnModel
	{
		public string Field { get; set; }
		public string HeaderText { get; set; }
		public string Width { get; set; } = "150";
		public ColumnType Type { get; set; } = ColumnType.String;
		public string Format { get; set; }
		public bool AllowEditing { get; set; } = true;
		public bool IsVisible { get; set; } = true;
	}



	protected override async Task OnInitializedAsync()
	{
		await LoadAvailableTables();
		
	}

	private async Task LoadAvailableTables()
	{
		try
		{
			isLoading = true;
			StateHasChanged();

			// Initialize available tables with descriptions
			availableTables = new List<LookupTableDto>
			{
				new() { TableName = LookupTables.MenuMaster, ClassName = "MenuMaster", Description = "Menu Master" },
				new() { TableName = LookupTables.MenuTemplate, ClassName = "MenuTmplate", Description = "Menu Template" },
				new() { TableName = LookupTables.MenuUserTemplate, ClassName = "MenuUserTemplate", Description = "Menu User Template" },
				new() { TableName = LookupTables.SystemAdminUser, ClassName = "SystemAdminUser", Description = "System Admin Users" },
				new() { TableName = LookupTables.SystemAdminRole, ClassName = "SystemAdminRole", Description = "System Admin Roles" },
				new() { TableName = LookupTables.SystemAdminUserRole, ClassName = "SystemAdminUserRole", Description = "System Admin User Roles" },
				new() { TableName = LookupTables.Company, ClassName = "Company", Description = "Companies" },
				new() { TableName = LookupTables.CompanyDatabase, ClassName = "CompanyDatabase", Description = "Company Databases" },
				new() { TableName = LookupTables.CompanyUser, ClassName = "CompanyUser", Description = "Company Users" },
				new() { TableName = LookupTables.CompanyUserRole, ClassName = "CompanyUserRole", Description = "Company User Roles" }
			};

			await Task.Delay(500); // Simulate API call
		}
		catch (Exception ex)
		{
			await ToastService.ShowErrorAsync("Error", $"Failed to load tables: {ex.Message}");
		}
		finally
		{
			isLoading = false;
			StateHasChanged();
		}
	}

	private async Task OnTableSelectionChanged(ChangeEventArgs<string, LookupTableDto> args)
	{
		selectedTableName = args.Value;
		if (!string.IsNullOrEmpty(selectedTableName))
		{
			await LoadTableData();
		}
		else
		{
			gridData.Clear();
			gridColumns.Clear();
			totalRecords = 0;
		}
		StateHasChanged();
	}

	private async Task LoadTableData()
	{
		try
		{
			isLoading = true;
			StateHasChanged();

			// Clear existing data
			gridData.Clear();
			gridColumns.Clear();

			// Get the entity type for the selected table
			if (LookupTables.EntityMap.TryGetValue(selectedTableName, out var entityType))
			{
				// Generate columns based on entity properties
				await GenerateColumns(entityType);

				// Generate sample data (replace with actual data service call)
				await GenerateSampleData(entityType);

				totalRecords = gridData.Count;

				await ToastService.ShowSuccessAsync("Success", $"Loaded {totalRecords} records from {GetSelectedTableDescription()}");
			}
			else
			{
				await ToastService.ShowWarningAsync("Error", $"Entity type not found for table: {selectedTableName}");
			}
		}
		catch (Exception ex)
		{
			await ToastService.ShowErrorAsync("Error", $"Failed to load data: {ex.Message}");
		}
		finally
		{
			isLoading = false;
			StateHasChanged();
		}
	}

	private async Task GenerateColumns(Type entityType)
	{
		await Task.Run(() =>
		{
			gridColumns.Clear();
			var properties = entityType.GetProperties(BindingFlags.Public | BindingFlags.Instance);

			foreach (var prop in properties)
			{
				if (ShouldIncludeProperty(prop))
				{
					var column = new GridColumnModel
						{
							Field = prop.Name,
							HeaderText = GetDisplayName(prop),
							Width = GetColumnWidth(prop.PropertyType),
							Type = GetColumnType(prop.PropertyType),
							Format = GetColumnFormat(prop.PropertyType),
							AllowEditing = !IsReadOnlyProperty(prop)
						};
					gridColumns.Add(column);
				}
			}
		});
	}

	private async Task GenerateSampleData(Type entityType)
	{
		await Task.Run(() =>
		{
			// This is sample data generation - replace with actual data service call
			var sampleCount = new Random().Next(5, 25);

			for (int i = 1; i <= sampleCount; i++)
			{
				var record = new Dictionary<string, object>();

				foreach (var column in gridColumns)
				{
					record[column.Field] = GenerateSampleValue(column.Type, column.Field, i);
				}

				gridData.Add(record);
			}
		});
	}

	private object GenerateSampleValue(ColumnType columnType, string fieldName, int index)
	{
		var random = new Random();

		return columnType switch
		{
			ColumnType.Number => fieldName.ToLower().Contains("id") ? index : random.Next(1, 1000),
			ColumnType.Boolean => random.NextDouble() > 0.5,
			ColumnType.Date => DateTime.Now.AddDays(-random.Next(0, 365)),
			ColumnType.DateTime => DateTime.Now.AddDays(-random.Next(0, 365)).AddHours(random.Next(0, 24)),
			_ => fieldName.ToLower().Contains("name") ? $"Sample {fieldName} {index}" :
					fieldName.ToLower().Contains("code") ? $"CODE{index:D3}" :
					fieldName.ToLower().Contains("description") ? $"Description for {fieldName} record {index}" :
					$"Value {index}"
		};
	}

//

	private bool ShouldIncludeProperty(PropertyInfo prop)
	{
		// Skip complex navigation properties and certain system properties
		return prop.PropertyType.IsValueType ||
						prop.PropertyType == typeof(string) ||
						prop.PropertyType == typeof(DateTime?) ||
						prop.PropertyType == typeof(bool?);
	}

	private string GetDisplayName(PropertyInfo prop)
	{
		var displayAttr = prop.GetCustomAttribute<DisplayAttribute>();
		return displayAttr?.Name ?? AddSpacesToCamelCase(prop.Name);
	}

	private string GetColumnWidth(Type propType)
	{
		return propType switch
		{
			Type t when t == typeof(bool) || t == typeof(bool?) => "80",
			Type t when t == typeof(int) || t == typeof(long) || t == typeof(decimal) || t == typeof(double) => "120",
			Type t when t == typeof(DateTime) || t == typeof(DateTime?) => "150",
			_ => "180"
		};
	}

	private ColumnType GetColumnType(Type propType)
	{
		return propType switch
		{
			Type t when t == typeof(int) || t == typeof(long) || t == typeof(decimal) || t == typeof(double) ||
						t == typeof(int?) || t == typeof(long?) || t == typeof(decimal?) || t == typeof(double?) => ColumnType.Number,
			Type t when t == typeof(bool) || t == typeof(bool?) => ColumnType.Boolean,
			Type t when t == typeof(DateTime) || t == typeof(DateTime?) => ColumnType.DateTime,
			_ => ColumnType.String
		};
	}

	private string GetColumnFormat(Type propType)
	{
		return propType switch
		{
			Type t when t == typeof(DateTime) || t == typeof(DateTime?) => "dd/MM/yyyy",
			Type t when t == typeof(decimal) || t == typeof(decimal?) => "N2",
			_ => null
		};
	}

	private bool IsReadOnlyProperty(PropertyInfo prop)
	{
		return prop.Name.ToLower().EndsWith("id") || !prop.CanWrite;
	}

	private string AddSpacesToCamelCase(string text)
	{
		if (string.IsNullOrEmpty(text))
			return string.Empty;

		var result = new StringBuilder();
		result.Append(text[0]);

		for (int i = 1; i < text.Length; i++)
		{
			if (char.IsUpper(text[i]))
				result.Append(' ');
			result.Append(text[i]);
		}

		return result.ToString();
	}

	private string GetSelectedTableDescription()
	{
		return availableTables.FirstOrDefault(t => t.TableName == selectedTableName)?.Description ?? selectedTableName;
	}

	private async Task RefreshData()
	{
		if (!string.IsNullOrEmpty(selectedTableName))
		{
			await LoadTableData();
		}
		else
		{
			await LoadAvailableTables();
		}
	}

	private async Task AddNewRecord()
	{
		await ToastService.ShowInfoAsync("Info", "Add new record functionality will be implemented");
		// Implement add new record logic
	}

	private async Task EditRecord(IDictionary<string, object> record)
	{
		await ToastService.ShowInfoAsync("Info", "Edit record functionality will be implemented");
		// Implement edit record logic
	}

	private async Task DeleteRecord(IDictionary<string, object> record)
	{
		await ToastService.ShowInfoAsync("Info", "Delete record functionality will be implemented");
		// Implement delete record logic
	}

	private async Task ExportData()
	{
		await ToastService.ShowInfoAsync("Info", "Export functionality will be implemented");
		// Implement export logic
	}

	private async Task OnRecordDoubleClick(RecordDoubleClickEventArgs<IDictionary<string, object>> args)
	{
		await EditRecord(args.RowData);
	}
}

<style>
    .lookup-container {
        padding: 1.5rem;
        background-color: var(--bg-primary);
        min-height: calc(100vh - var(--topbar-height));
    }

    .lookup-dropdown {
        border: 2px solid var(--border-color);
        border-radius: var(--border-radius);
    }

    .table-info {
        background: rgba(59, 130, 246, 0.05);
        padding: 0.75rem 1rem;
        border-radius: var(--border-radius);
        border-left: 4px solid var(--primary-color);
    }

    /* Syncfusion Grid Customization */
    .lookup-grid {
        border: 2px solid var(--border-color);
        border-radius: var(--border-radius);
    }

    .lookup-grid .e-grid .e-gridheader {
        background: linear-gradient(135deg, var(--bg-secondary) 0%, rgba(59, 130, 246, 0.05) 100%);
        border-bottom: 2px solid var(--border-color);
    }

    .lookup-grid .e-grid .e-columnheader {
        font-weight: 600;
        color: var(--text-primary);
        background: transparent;
    }

    .lookup-grid .e-grid .e-row:hover {
        background: rgba(59, 130, 246, 0.05);
    }

    .lookup-grid .e-grid .e-altrow {
        background: rgba(248, 250, 252, 0.5);
    }

    /* Dark mode support */
    .dark-mode .page-header {
        background: linear-gradient(135deg, var(--bg-secondary) 0%, rgba(59, 130, 246, 0.1) 100%);
    }

    .dark-mode .table-info {
        background: rgba(59, 130, 246, 0.1);
    }

    .dark-mode .lookup-grid .e-grid .e-gridheader {
        background: linear-gradient(135deg, var(--bg-secondary) 0%, rgba(59, 130, 246, 0.1) 100%);
    }

    .dark-mode .lookup-grid .e-grid .e-altrow {
        background: rgba(30, 41, 59, 0.3);
    }
</style>